// Code generated by github.com/turscar/shmock DO NOT EDIT.

package {{ .GenPackage }}

{{ with .Imports }}
import (
{{ range . }}
    {{ with .Name }}{{ . }} }}{{ end }}"{{ .Path }}"{{ end }}
)
{{ end }}

import (
    "github.com/google/go-cmp/cmp"
    "testing"
    "github.com/sanity-io/litter"
    "{{ .ModelPath }}"
)

var _ {{ .Package }}.Querier = (*{{ .Struct }})(nil)

type Operation interface {
    isOp()
}

type {{ .Struct }} struct {
    T testing.TB
    Expected []Operation
}

{{ range .Methods }}
func (m *{{ $.Struct }}) {{ .Name }}({{ range $i, $v := .Input }}{{ if ne $i 0 }}, {{ end }}{{ $v.Name }} {{ $v.Type }}{{ end }}) ({{ range $i, $v := .Output }}{{ if ne $i 0 }}, {{ end }}{{ $v.Type }}{{ end }}) {
    if len(m.Expected) == 0 {
        m.T.Logf("{{ lcfirst .Name }}{\n{{ range rest .Input }}  %s\n{{ end }}}\n"{{ range rest .Input }}, litter.Sdump({{ .Name}}){{ end }})
        m.T.Fatalf("Request for {{ .Name }} but no operations left")
    }

    v, ok := m.Expected[0].({{ lcfirst .Name }})
    if !ok {
        m.T.Fatalf("Got request for {{ .Name }}, expected %T", m.Expected[0]);
    }
    m.Expected = m.Expected[1:]

{{ range rest .Input }}
    diff := cmp.Diff(v.{{ ucfirst .Name }}, {{ .Name }})
    if diff != "" {
        m.T.Errorf("{{ .Name }} mismatch (-want +got):\n%s", diff)
    }
{{ end }}

    return {{ range $i, $v := .Output }}{{ if ne $i 0 }}, {{ end }}v.{{ if eq .Type "error" }}Err{{ else }}Result{{ with $i }}{{ . }}{{ end }}{{ end }}{{ end }}
}
{{ end }}

{{ range .Methods }}
type {{ lcfirst .Name }} struct {
  {{ range rest .Input }}
  {{ ucfirst .Name }} {{ .Type }}{{ end }}
  {{ range $i, $v := .Output }}
  {{ if eq .Type "error" }}Err{{ else }}Result{{ with $i }}{{ . }}{{ end }}{{ end }} {{ .Type }}{{ end }}
}

func ({{ lcfirst .Name }}) isOp() {}
{{ end }}
